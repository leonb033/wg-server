#!/bin/bash

clear

wg_interface=$1
command=$2

wg_interface_ip="10.0.0.1"
wg_port="51820"
peer_name="peer"
public_key="empty"
allowed_ips="10.0.0.0/8"

prompt_continue() {
    echo
    echo $1 "Press ENTER to continue"
    read
    clear
}

prompt_continue_or_exit() {
    echo
    echo "Press ENTER to continue."
    echo "Press CTRL + C to exit."
    read
    clear
}

generate_interface_config() {
    echo "[Interface]"                                                               | sudo tee /etc/wireguard/$wg_interface.conf > /dev/null
    echo "PrivateKey = $(sudo cat /etc/wireguard/keys/$wg_interface/private.key)"    | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo "Address = $wg_interface_ip"                                                | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo "ListenPort = $wg_port"                                                     | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo                                                                             | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
}

# generate public & private key
generate_keys() {
    # make sure all files have correct permissions
    sudo mkdir -p /etc/wireguard/keys/$wg_interface
    sudo touch /etc/wireguard/keys/$wg_interface/private.key
    sudo touch /etc/wireguard/keys/$wg_interface/public.key
    sudo touch /etc/wireguard/$wg_interface.conf
    sudo chown -R root:root /etc/wireguard
    sudo chmod -R 700 /etc/wireguard
    # generate keys
    umask 077
    wg genkey | sudo tee /etc/wireguard/keys/$wg_interface/private.key > /dev/null
    sudo cat /etc/wireguard/keys/$wg_interface/private.key | wg pubkey | sudo tee /etc/wireguard/keys/$wg_interface/public.key > /dev/null
}

# remove peer from interface config
remove_peer() {
    sudo sed -i "/### Name: $1/,/##########/d" /etc/wireguard/$wg_interface.conf
}

# print help message
print_help() {
    echo "Invalid arguments. Available commands:"
    echo "<INTERFACE> must be the name of the interface you want to modify."
    echo
    echo "> $(basename "$0") <INTERFACE> create"
    echo "Sets up a new wireguard interface."
    echo
    echo "> $(basename "$0") <INTERFACE> delete"
    echo "Deletes this wireguard interface."
    echo
    echo "> $(basename "$0") <INTERFACE> generate-keys"
    echo "Generates new public and private key for this interface."
    echo
    echo "> $(basename "$0") <INTERFACE> add-peer"
    echo "Adds a new peer to this interface."
    echo
    echo "> $(basename "$0") <INTERFACE> remove-peer"
    echo "Removes a peer from this interface."
    echo
}

#
# print help if <INTERFACE> parameter is not defined
#
[[ $wg_interface == "" ]] && print_help && exit

#
# create
#
if [[ $command == "create" ]]; then   
    
    # input: wg_interface_ip
    echo "Enter IPv4 address of this interface. [def: $wg_interface_ip]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        wg_interface_ip=$REPLY
    fi
    clear

    # input: wg_port
    echo "Enter public port to connect to the wireguard service. Make sure port is free. [def: $wg_port]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        wg_port=$REPLY
    fi
    clear

    # summary
    echo "wg_interface_ip =  $wg_interface_ip"
    echo "wg_port =        $wg_port"
    echo
    prompt_continue_or_exit

    # generate public & private key
    generate_keys

    # generate basic interface config
    generate_interface_config

# 
# delete
#
elif [[ $command == "delete" ]]; then
    
    # stop interface
    sudo systemctl stop wg-quick@$wg_interface.service
    sudo systemctl disable wg-quick@$wg_interface.service
    sudo wg-quick down $wg_interface

    # delete files
    sudo rm /etc/wireguard/$wg_interface.conf
    sudo rm -r /etc/wireguard/keys/$wg_interface
    

#
# generate-keys
#
elif [[ $command == "generate-keys" ]]; then
    
    # generate keys and interface config
    generate_keys
    generate_interface_config

#
# add-peer
#
elif [[ $command == "add-peer" ]]; then

    # input: peer_name
    echo "Enter name for new peer. Make sure it is unique. [def: $peer_name]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        peer_name=$REPLY
    fi
    clear

    # input: public_key
    echo "Enter public key of peer. [def: $public_key]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        public_key=$REPLY
    fi
    clear

    # input: allowed_ips
    echo "Enter network that peer should have access to. [def: $allowed_ips]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        allowed_ips=$REPLY
    fi
    clear

    # summary
    echo "peer_name =  $peer_name"
    echo "public_key =   $public_key"
    echo "allowed_ips =  $allowed_ips"
    echo
    prompt_continue_or_exit

    # remove existing peer
    remove_peer $peer_name

    # add peer to interface config
    echo "### Name: $peer_name"           | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo "[Peer]"                         | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo "PublicKey = $public_key"        | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo "AllowedIPs = $allowed_ips"      | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null
    echo "##########"                     | sudo tee -a /etc/wireguard/$wg_interface.conf > /dev/null

#
# remove-peer
#
elif [[ $command == "remove-peer" ]]; then

    # input: peer_name
    echo "Enter name of peer that should be removed. [def: $peer_name]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        peer_name=$REPLY
    fi
    clear

    # remove existing peer
    remove_peer $peer_name

#
# help
#
else
    print_help
fi

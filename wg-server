#!/bin/bash

clear

wg_client_net="10.11.12.0/24"
wg_port="51820"

prompt_continue() {
    echo
    echo $1 "Press ENTER to continue"
    read
    clear
}

prompt_continue_or_exit() {
    echo
    echo "Press ENTER to continue."
    echo "Press CTRL + C to exit."
    read
    clear
}

generate_server_config() {
    echo "### DO NOT MODIFY THIS FILE MANUALLY. USE WG-SERVER COMMANDS."    | sudo tee /etc/wireguard/wg0.conf > /dev/null
    echo "[Interface]"                                                      | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "PrivateKey = $(sudo cat /etc/wireguard/private.key)"              | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "Address = $wg_client_net"                                         | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "ListenPort = $wg_port"                                            | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo                                                                    | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
}

# generate public & private key
generate_keys() {
    # make sure all files have correct permissions
    sudo mkdir -p /etc/wireguard
    sudo touch /etc/wireguard/private.key
    sudo touch /etc/wireguard/public.key
    sudo touch /etc/wireguard/wg0.conf
    sudo chown -R root:root /etc/wireguard
    sudo chmod -R 700 /etc/wireguard
    # generate keys
    umask 077
    wg genkey | sudo tee /etc/wireguard/private.key > /dev/null
    sudo cat /etc/wireguard/private.key | wg pubkey | sudo tee /etc/wireguard/public.key > /dev/null
}

# remove client from server config
remove_client() {
    sudo sed -i "/### Name: $1/,/##########/d" /etc/wireguard/wg0.conf
}

#
# setup
#
if [[ $1 == "setup" ]]; then
    # input: wg_client_net
    echo "Enter IPv4 address range that clients will be assigned to. [def: $wg_client_net]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        wg_client_net=$REPLY
    fi
    clear

    # input: wg_port
    echo "Enter public port to connect to the wireguard service. [def: $wg_port]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        wg_port=$REPLY
    fi
    clear

    # summary
    echo "WARNING: If there already exists a wg0 interface it will be overwritten. All connected clients will have to be readded."
    echo
    echo "Summary:"
    echo "wg_client_net =  $wg_client_net"
    echo "wg_port =        $wg_port"
    echo
    echo "Should the setup be started?"
    prompt_continue_or_exit

    # install wireguard
    echo "Installing wireguard..."
    sudo apt update
    sudo apt install wireguard
    prompt_confirm "Finished. "

    # generate public & private key
    echo "Generating public & private key..."
    generate_keys
    prompt_confirm "Finished. "

    # generate basic wg0 config
    generate_server_config

    # open udp port
    sudo nft add element inet firewall open_udp { $wg_port }

    # start wireguard service
    sudo systemctl enable wg-quick@wg0.service
    sudo systemctl start wg-quick@wg0.service
    sudo systemctl status wg-quick@wg0.service

#
# generate-keys
#
elif [[ $1 == "generate-keys" ]]; then
    echo "WARNING: All connected clients will have to be readded."
    echo "Should the setup be started?"
    prompt_continue_or_exit
    generate_keys
    generate_server_config
    sudo systemctl restart wg-quick@wg0.service
    sudo systemctl status wg-quick@wg0.service

#
# client-add
#
elif [[ $1 == "client-add" ]]; then
    client_name="client"
    public_key="empty"
    allowed_ips="10.10.10.0/24"

    # input: client_name
    echo "Enter name for new client. Make sure it is unique. [def: $client_name]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        client_name=$REPLY
    fi
    clear

    # input: public_key
    echo "Enter public key of the client. [def: $public_key]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        public_key=$REPLY
    fi
    clear

    # input: allowed_ips
    echo "Enter network that client should have access to. [def: $allowed_ips]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        allowed_ips=$REPLY
    fi
    clear

    # summary
    echo "WARNING: If there already exists a client with name '$client_name' it will be removed."
    echo
    echo "Summary:"
    echo "client_name =  $client_name"
    echo "public_key =   $public_key"
    echo "allowed_ips =  $allowed_ips"
    echo
    echo "Should the setup be started?"
    prompt_continue_or_exit

    # remove existing client
    remove_client $client_name

    # add client to wg0 config
    echo "### Name: $client_name" | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "[Peer]" | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "PublicKey = $public_key" | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "AllowedIPs = $allowed_ips" | sudo tee -a /etc/wireguard/wg0.conf > /dev/null
    echo "##########" | sudo tee -a /etc/wireguard/wg0.conf > /dev/null

    # restart service
    sudo systemctl restart wg-quick@wg0.service
    sudo systemctl status wg-quick@wg0.service

#
# client-remove
#
elif [[ $1 == "client-remove" ]]; then
    client_name="client"

    # input: client_name
    echo "Enter name of client that should be removed. [def: $client_name]"
    read -p ">>> "
    if [[ $REPLY != "" ]]; then
        client_name=$REPLY
    fi
    clear
    remove_client client_name

    # restart service
    sudo systemctl restart wg-quick@wg0.service
    sudo systemctl status wg-quick@wg0.service

#
# help
#
else
    echo "Invalid arguments. Available commands:"
    echo
    echo "> $(basename "$0") setup"
    echo "Sets up a new wireguard interface."
    echo
    echo "> $(basename "$0") generate-keys"
    echo "Generates new public and private key for this server."
    echo
    echo "> $(basename "$0") client-add"
    echo "Adds a new client."
    echo
    echo "> $(basename "$0") client-remove"
    echo "Removes a client."
    echo
fi
